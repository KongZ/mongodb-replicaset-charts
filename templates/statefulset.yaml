apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: {{ template "mongodb.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "mongodb.fullname" . }}
spec:
  serviceName: {{ template "mongodb.fullname" . }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "mongodb.name" . }}
        release: {{ .Release.Name }}
    {{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
    {{- end }}
    spec:
      affinity:
      {{- if eq .Values.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: "{{ template "mongodb.name" . }}"
                  release: "{{ .Release.Name }}"
      {{- else }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "{{ template "mongodb.name" . }}"
                  release: "{{ .Release.Name }}"
      {{- end }}
      {{- if .Values.affinity }}
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      initContainers:
      ## FCK #1 you can't create user if replica set was started.
      ## So you need to start empty db, then create user, then shutdown and restart with replica mode
      ## FCK #2 But if you already create user, /docker-entrypoint-initdb.d will not run
      ## https://github.com/docker-library/mongo/blob/master/3.6/docker-entrypoint.sh#L213
      - name: "create-root"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
        - /bin/bash
        - -c
        - docker-entrypoint.sh mongod &
          (sleep 15; mongod --shutdown)
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "root"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mongodb.fullname" . }}
              key: mongodb-root-password
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /data/db
      - name: "chown"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
        - /bin/bash
        - -c
        - (chown -R mongodb:mongodb /data/keys)
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: mongodb-keyfile
          mountPath: /data/keys
      containers:
      - name: mongodb
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        args: [ "-f", "/data/configdb/mongod.conf"]
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "/scripts/add-replica.sh > /var/log/add-replica.log 2>&1 &"]
        ports:
        - containerPort: {{ default 27017 .Values.port }}
          name: mongodb
        resources:
{{ toYaml .Values.resources | indent 12 }}
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - 'db.adminCommand("ping")'
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - 'db.adminCommand("ping")'
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
        volumeMounts:
        - name: mongodb-keyfile
          mountPath: /data/keys
        - name: configdb
          mountPath: /data/configdb
        - name: scripts
          mountPath: /scripts
        - name: data
          mountPath: /data/db
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      volumes:
      - name: configdb
        configMap:
          name: {{ template "mongodb.fullname" . }}
          items:
            - key: mongod.conf
              path: mongod.conf
              mode: 256 # 0400
      - name: scripts
        configMap:
          name: {{ template "mongodb.fullname" . }}
          items:
            - key: add-replica.sh
              path: add-replica.sh
              mode: 320 # 0500
      - name: mongodb-keyfile
        secret:
          secretName: {{ template "mongodb.fullname" . }}
          items:
            - key: mongodb-keyfile
              path: mongodb-keyfile
              mode: 256 # 0400
  {{- if not .Values.persistence.enabled }}
      - name: data
        emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - {{ .Values.persistence.accessMode | quote }}
    {{- if .Values.persistence.storageClass }}
    {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
    {{- end }}
    {{- end }}
      resources:
        requests:
          storage: "{{ .Values.persistence.size }}"
  {{- end }}
