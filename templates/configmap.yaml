apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "mongodb.fullname" . }}
  labels:
    app: {{ template "mongodb.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  mongod.conf: |-
    # mongod.conf
    # for documentation of all options, see:
    #   http://docs.mongodb.org/manual/reference/configuration-options/
    # Where and how to store data.
    storage:
      dbPath: /data/db
      journal:
        enabled: true
    #  engine:
    #  mmapv1:
    #  wiredTiger:
    # where to write logging data.
    # systemLog:
    #   destination: file
    #   logAppend: true
    #   path: /var/log/mongodb/mongod.log
    # network interfaces
    net:
      port: {{ default "27017" .Values.port }}
      bindIp: {{ default "0.0.0.0" .Values.bindIp }}
    #processManagement:
    #operationProfiling:
{{- if .Values.replSetName  }}
    replication:
      replSetName: {{ .Values.replSetName }}
    security:
      keyFile: /data/keys/mongodb-keyfile
{{- end}}
    #sharding:
    ## Enterprise-Only Options:
    #auditLog:
    #snmp:
  add-replica.sh: |-
{{- if .Values.replSetName  }}
    #!/bin/sh
    ## Wait ~120s to allow Mongo to generate replica set key
    ## Ref: https://jira.mongodb.org/browse/SERVER-31916?focusedCommentId=1724684
    echo "`date -Is` Waiting 120 seconds until server is ready..."
    sleep 120
    echo "`date -Is` Looking for master node..."
    OLD_IFS=$IFS
    IFS=$'+'
    {{- $global := . }}
    NODES="{{- range $i, $e := until (int .Values.replicas) }}{{- if gt $i 0 }}+{{- end }}{{ template "mongodb.fullname" $global }}-{{ $i }}.{{ template "mongodb.fullname" $global }}.{{ $global.Release.Namespace }}.svc.cluster.local{{- end }}"
    MASTER=""
    NODE_PORT={{ default 27017 .Values.port }}
    NODE_NAME="${HOSTNAME}.{{ template "mongodb.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:${NODE_PORT}"
    for NODE in $NODES
    do
      echo "`date -Is` Connecting to $NODE:$NODE_PORT ..."
      MASTER=$(mongo admin --host $NODE --port $NODE_PORT -u root -p {{ .Values.rootPassword }} --quiet --eval "rs.isMaster().primary")
      if [ ! -z "$MASTER" ] 
      then
        echo "`date -Is` Found master at '${MASTER}'"
        MASTER="$NODE"
        break
      fi
    done
    if [ -z "$MASTER" ]
    then
      echo "`date -Is` No master found. Set current node to master"
      mongo admin --host localhost --port $NODE_PORT -u root -p {{ .Values.rootPassword }} --eval "
        rs.initiate({ 
          _id: '{{ .Values.replSetName }}',
          version: 1,
          members: [
            {
              _id: 0,
              host : '${NODE_NAME}'
            }
          ]
        });
        rs.config();
      " || true
    else
      echo "`date -Is` Current node is '${NODE_NAME}'"
      echo "`date -Is` Joining replicat set at '${MASTER}'..."
      ## Give 60 seconds to allow master node to ready. Founding master node does not mean master node is ready to connect.
      # sleep 60
      ## FCK #3 When adding replica it may throw error, to avoid error remove a node from voting rights
      ## https://docs.mongodb.com/manual/reference/method/rs.add/#add-a-secondary-to-an-existing-replica-set
      mongo admin --host ${MASTER} --port ${NODE_PORT} -u root -p {{ .Values.rootPassword }} --eval "
        rs.add({ host: '${NODE_NAME}', priority: 0, votes: 0 });
      "
      ## FCK #4 It may up to 120 seconds until nodes are ready to elect
      ## Ensure that the new member has reached SECONDARY state before reconfig()
      ## https://docs.mongodb.com/manual/reference/method/rs.add/#add-a-secondary-to-an-existing-replica-set
      RETRY_COUNT=0
      IS_SECONDARY_READY=""
      while [ "$IS_SECONDARY_READY" != "SECONDARY" ]
      do 
        IS_SECONDARY_READY=$(mongo admin --host ${MASTER} --port ${NODE_PORT} -u root -p {{ .Values.rootPassword }} --quiet --eval "
          var sts=rs.status(); 
          for (var idx in sts.members) { 
            if (sts.members[idx].name == '${NODE_NAME}') {
              sts.members[idx].stateStr
            }
          }
        ")
        sleep 5
        RETRY_COUNT=$((RETRY_COUNT+1))
        if [ "$RETRY_COUNT" -gt 100 ]
        then
          break
        fi
        echo "`date -Is` Wait until node is ready for voting $RETRY_COUNT/100... Current status is ${IS_SECONDARY_READY}"
      done
      ## Add voting rights back to adding node
      mongo admin --host ${MASTER} --port ${NODE_PORT} -u root -p {{ .Values.rootPassword }} --eval "
        var cfg = rs.conf();
        for (var idx in cfg.members) { 
          if (cfg.members[idx].host == '${NODE_NAME}') {
            cfg.members[idx].priority = 1; 
            cfg.members[idx].votes = 1;
          }
        }
        rs.reconfig(cfg)
      "
    fi
    IFS=$OLD_IFS
{{- end}}
